{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/KIIT/Desktop/dev-community/frontend/context/AuthContext.js"],"sourcesContent":["// next-app/context/AuthContext.js\r\nimport { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  // Update user state to include new fields like avatarUrl, bio, followers, following\r\n  const [user, setUser] = useState(null); // { _id, username, email, avatarUrl, bio, followers, following }\r\n  const [token, setToken] = useState(null);\r\n  const [loading, setLoading] = useState(true); // To indicate if initial loading from localStorage is complete\r\n\r\n  const router = useRouter();\r\n\r\n  // Load auth state from localStorage on initial render\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedUser = localStorage.getItem('user');\r\n\r\n    if (storedToken && storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setToken(storedToken);\r\n        setUser(parsedUser); // Ensure parsedUser now includes all new fields\r\n      } catch (e) {\r\n        console.error(\"Failed to parse user from localStorage:\", e);\r\n        // Clear invalid data\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n    setLoading(false); // Finished loading initial state\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  // Function to set token and user data upon login/registration\r\n  const login = (newToken, newUser) => {\r\n    // newUser should now contain: _id, username, email, avatarUrl, bio, followers, following\r\n    localStorage.setItem('token', newToken);\r\n    localStorage.setItem('user', JSON.stringify(newUser));\r\n    setToken(newToken);\r\n    setUser(newUser);\r\n  };\r\n\r\n  // New function to update user data in context (e.g., after profile edit)\r\n  const updateUser = (updatedUser) => {\r\n    localStorage.setItem('user', JSON.stringify(updatedUser)); // Update localStorage\r\n    setUser(updatedUser); // Update context state\r\n  };\r\n\r\n  // Function to clear auth state upon logout\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setToken(null);\r\n    setUser(null);\r\n    router.push('/login'); // Redirect to login page on logout\r\n  };\r\n\r\n  // Derived state to check if user is authenticated\r\n  const isAuthenticated = !!token && !!user;\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, isAuthenticated, login, logout, updateUser, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to consume the AuthContext\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"names":[],"mappings":"AAAA,kCAAkC;;;;;;AAClC;AACA;;;;AAEA,MAAM,4BAAc,CAAA,GAAA,mGAAA,CAAA,gBAAa,AAAD,EAAE;AAE3B,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAE;IACvC,oFAAoF;IACpF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,iEAAiE;IACzG,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,+DAA+D;IAE7G,MAAM,SAAS,CAAA,GAAA,uHAAA,CAAA,YAAS,AAAD;IAEvB,sDAAsD;IACtD,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,cAAc,aAAa,OAAO,CAAC;QACzC,MAAM,aAAa,aAAa,OAAO,CAAC;QAExC,IAAI,eAAe,YAAY;YAC7B,IAAI;gBACF,MAAM,aAAa,KAAK,KAAK,CAAC;gBAC9B,SAAS;gBACT,QAAQ,aAAa,gDAAgD;YACvE,EAAE,OAAO,GAAG;gBACV,QAAQ,KAAK,CAAC,2CAA2C;gBACzD,qBAAqB;gBACrB,aAAa,UAAU,CAAC;gBACxB,aAAa,UAAU,CAAC;YAC1B;QACF;QACA,WAAW,QAAQ,iCAAiC;IACtD,GAAG,EAAE,GAAG,uDAAuD;IAE/D,8DAA8D;IAC9D,MAAM,QAAQ,CAAC,UAAU;QACvB,yFAAyF;QACzF,aAAa,OAAO,CAAC,SAAS;QAC9B,aAAa,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC;QAC5C,SAAS;QACT,QAAQ;IACV;IAEA,yEAAyE;IACzE,MAAM,aAAa,CAAC;QAClB,aAAa,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC,eAAe,sBAAsB;QACjF,QAAQ,cAAc,uBAAuB;IAC/C;IAEA,2CAA2C;IAC3C,MAAM,SAAS;QACb,aAAa,UAAU,CAAC;QACxB,aAAa,UAAU,CAAC;QACxB,SAAS;QACT,QAAQ;QACR,OAAO,IAAI,CAAC,WAAW,mCAAmC;IAC5D;IAEA,kDAAkD;IAClD,MAAM,kBAAkB,CAAC,CAAC,SAAS,CAAC,CAAC;IAErC,qBACE,qKAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAO;YAAiB;YAAO;YAAQ;YAAY;QAAQ;kBAC7F;;;;;;AAGP;AAGO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,mGAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/KIIT/Desktop/dev-community/frontend/pages/_app.js"],"sourcesContent":["import Navbar from '../components/Navbar';\r\nimport '../styles/globals.css';\r\nimport { AuthProvider } from '../context/AuthContext'; // <--- IMPORT AuthProvider\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return (\r\n    <AuthProvider> {/* <--- WRAP YOUR APP WITH AuthProvider */}\r\n      <Navbar />\r\n      <Component {...pageProps} />\r\n    </AuthProvider>\r\n  );\r\n}\r\n\r\nexport default MyApp;"],"names":[],"mappings":";;;;AAAA;AAEA,sMAAuD,2BAA2B;;;;;AAElF,SAAS,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE;IACrC,qBACE,qKAAC,+GAAA,CAAA,eAAY;;YAAC;0BACZ,qKAAC,6GAAA,CAAA,UAAM;;;;;0BACP,qKAAC;gBAAW,GAAG,SAAS;;;;;;;;;;;;AAG9B;uCAEe","debugId":null}}]
}